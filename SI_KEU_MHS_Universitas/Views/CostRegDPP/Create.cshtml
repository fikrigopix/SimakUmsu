@model SI_KEU_MHS_Universitas.Models.Fnc_Cost_Timing

@{
    ViewBag.Title = "CostRegDPP";
    short Entry_Year_Id = ViewBag.Entry_Year.Entry_Year_Id;
    short Entry_Period_Type_Id = ViewBag.Entry_Period_Type.Entry_Period_Type_Id;
}
@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>*@
@*<script src="~/Scripts/autoNumeric-1.9.18.js"></script>
<script src="~/Scripts/customAutonumeric.js"></script>*@

<h3>Setting Biaya Registrasi DPP</h3>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myFormId" })) 
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default bootstrap-admin-no-table-panel">
                <div class="panel-heading">
                    <div class="pull-right">
                        <a onclick="history.go(-1); return false;" href="#" class="badge">Batal</a>
                    </div>
                    <div class="bootstrap-admin-box-title text-success"><b>Tambah Data</b></div>
                </div>
                <div class="bootstrap-admin-panel-content bootstrap-admin-no-table-panel-content collapse in">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Entry_Year_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @ViewBag.Entry_Year.Entry_Year_Id
                                @Html.Hidden("Entry_Year_Id", Entry_Year_Id)
                                @Html.ValidationMessageFor(model => model.Entry_Year_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Entry_Period_Type_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @ViewBag.Entry_Period_Type.Entry_Period_Type_Name
                                @Html.Hidden("Entry_Period_Type_Id", Entry_Period_Type_Id)
                                @Html.ValidationMessageFor(model => model.Entry_Period_Type_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @if (ViewBag.PaymentOrder != null && ViewBag.DepartmentId != null && ViewBag.ClassProgId != null)
                        {
                            short Payment_Order = ViewBag.PaymentOrders;
                            short Department_Id = ViewBag.Departments.Department_Id;
                            short Class_Prog_Id = ViewBag.ClassProgs.Class_Prog_Id;

                            <div class="form-group">
                                @Html.LabelFor(model => model.Payment_Order, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @ViewBag.PaymentOrders
                                    @Html.Hidden("Payment_Order", Payment_Order)
                                    @Html.ValidationMessageFor(model => model.Payment_Order, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Department_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @ViewBag.Departments.Department_Name
                                    @Html.Hidden("Department_Id", Department_Id)
                                    @Html.ValidationMessageFor(model => model.Department_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Class_Prog_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @ViewBag.ClassProgs.Class_Program_Name
                                    @Html.Hidden("Class_Prog_Id", Class_Prog_Id)
                                    @Html.ValidationMessageFor(model => model.Class_Prog_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Payment_Order, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-2">
                                    @Html.DropDownListFor(model => model.Payment_Order, new SelectList(ViewBag.PaymentOrders as System.Collections.IEnumerable, "Stage_Id", "Stage_Id"), "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Payment_Order, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Department_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.Department_Id, new SelectList(ViewBag.Departments as System.Collections.IEnumerable, "Department_Id", "Department_Name"), "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Department_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Class_Prog_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-4">
                                    @Html.DropDownListFor(model => model.Class_Prog_Id, new SelectList(ViewBag.ClassProgs as System.Collections.IEnumerable, "Class_Prog_Id", "Class_Program_Name"), "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Class_Prog_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            @Html.LabelFor(model => model.Term_Year_Id, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-5">
                                @Html.DropDownList("Term_Year_Id", null, "", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Term_Year_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Due_Date, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Due_Date, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Due_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                <input type="text" id="SAmount" name="SAmount" class="form-control auto" />
                            </div>
                            @Html.Hidden("Amount", 0)
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-8">
                                <button type="submit" name="submit" class="btn btn-success">
                                    Simpan <span class="glyphicon glyphicon-floppy-save" style="color:white" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.Cost_Item_Id, "Cost_Item_Id", htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.Hidden("Cost_Item_Id", 1)
                                @Html.ValidationMessageFor(model => model.Cost_Item_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.Created_By, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Created_By, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Created_By, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.Created_Date, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Created_Date, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Created_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.Modified_By, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Modified_By, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Modified_By, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.Modified_Date, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Modified_Date, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Modified_Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>*@
    <script type="text/javascript">
        function initializeRemotelyValidatingElementsWithAdditionalFields($form) {
            var remotelyValidatingElements = $form.find("[data-val-remote]");

            $.each(remotelyValidatingElements, function (i, element) {
                var $element = $(element);

                var additionalFields = $element.attr("data-val-remote-additionalfields");

                if (additionalFields.length == 0) return;

                var rawFieldNames = additionalFields.split(",");

                var fieldNames = $.map(rawFieldNames, function (fieldName) { return fieldName.replace("*.", ""); });

                $.each(fieldNames, function (i, fieldName) {
                    $form.find("#" + fieldName).change(function () {
                        // force re-validation to occur
                        $element.removeData("previousValue");
                        $element.valid();
                    });
                });
            });
        }

        $(document).ready(function () {
            initializeRemotelyValidatingElementsWithAdditionalFields($("#myFormId"));
        });
    </script>
}
